


```{python}
import pandas as pd
import plotly.express as px

```


```{python}
# Temperatures dataset
temperatures = pd.DataFrame(
    {
        "country": ["Sweden", "Denmark", "Norway"],
        "1994": [1, 2, 3],
        "1995": [3, 4, 5],
        "1996": [5, 6, 7],
    }
)

# Fuels Wide dataset
fuels_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_per_capita_wide.csv"
)

# Eurostat Births Wide dataset
euro_births_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/euro_births_wide.csv"
)

# Contracts dataset
contracts = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/chicago_contracts_20_23.csv"
)

# Population dataset
population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
```

# Practice Q: Wide or Long


```{python}
temperatures 
```

Since years are in columns and each row has the data of one country the dataframe is in wide format.

# From Wide to Long


```{python}
fuels_wide
```

# converting from wide to long
id_vars contient les deux variables qui permettent d'identifier une ligne. Si on en met une seule des deux qu'est ce qui se passe ? car l'entité et le code semblent identifier la même chose

```{python}
fuels_long = fuels_wide.melt(id_vars=["Entity", "Code"])
fuels_long
```

ok en faisant ça on a 567 rows × 3 columns vs 486 rows × 4 columns pour le code d'avant. sur ce 2ème code il a créé la variable "variable" qui contient la modalité Code. J0imagine  qui si on enlève les lignes où variable vaut Code, alors on retombe sur le fichier ci dessus
```{python}
fuels_long2 = fuels_wide.melt(id_vars=["Entity"])
fuels_long2
```


```{python}
fuels_long2 =fuels_long2.query("variable != 'Code'")
print(fuels_long2)
# Yes ! 486 rows x 3 columns
```

# 

```{python}
fuels_long = fuels_wide.melt(
    id_vars=['Entity', 'Code'],
    var_name='year',
    value_name='oil_consumption'
)
fuels_long
```

# if we want to remove the _y from years

```{python}
fuels_long['year'] = fuels_long['year'].str.replace('y_', '').astype(int)
fuels_long = fuels_long.sort_values(by=['Entity', 'year'])
fuels_long
```

# Practice Q: Temperatures to Long

Convert the temperatures dataset shown below into a long format. Your answer should have the following column names: “country”, “year”, and “avg_temp”.

```{python}
temperatures
```

```{python}
temperatures_long=temperatures.melt(
id_vars=["country"],
var_name="year",
value_name="temperatures"
)
temperatures_long
```

# Practice Q: Eurostat Births to Long
For this practice question, you will use the euro_births_wide dataset from Eurostat. It shows the annual number of births in 50 European countries.
The data is in a wide format. Convert it to a long format DataFrame that has the following column names: “country”, “year”, and “births_count”.

Remove the x prefix from the year columns and convert them to integers.

```{python}
euro_births_wide.head()
```


```{python}
# convert wide to long
euro_births_long=euro_births_wide.melt(
id_vars=["country"],
var_name="year",
value_name="births_count"
)
# replace x in year column content and change the column type to integer
euro_births_long["year"]=euro_births_long["year"].str.replace("x","").astype(int)

euro_births_long

```

# U sing Long Data for Analysis


```{python}
fuels_wide.head()
```


```{python}
fuels_long.groupby('Entity')['oil_consumption'].mean()
```

not easy to do the same in wide format

```{python}
fuels_wide[['y_1970', 'y_1980', 'y_1990', 'y_2000', 'y_2010', 'y_2020']].mean(axis=1)
```

#Long is also cool for ploting


```{python}
subset = fuels_long.query('Entity in ["Peru", "Iran", "China"]')
px.line(subset, x='year', y='oil_consumption', color='Entity', title='Average Fossil Fuel Consumption per Country')
```

# From Long to Wide


```{python}
contracts
```


```{python}
contracts_summary = contracts.groupby("state")["year"].value_counts().reset_index(name='count')
contracts_summary
```
 This is what we get
state	year	count
0	Alabama	2023	7
1	Alabama	2021	2
2	Alabama	2020	1

```{python}
contracts_wide = contracts_summary.pivot(
    index="state", columns="year", values="count"
).reset_index()
contracts_wide.head()
```

pour avoir les pays en colonnes il suffit d'inverser les id et les columns
```{python}
contracts_wide_year = contracts_summary.pivot(
    index="year", columns="state", values="count"
).reset_index()
contracts_wide_year
```

# Practice Q: Temperatures back to Wide
Convert the long temperatures_long dataset you created above back to a wide format. Your answer should have the following column names: “country”, “1994”, “1995”, and “1996”.

```{python}
temperatures_long
```

```{python}
temp_wide=temperatures_long.pivot(
    index="country",
    columns="year",
    values="temperatures"
).reset_index() # pour enlever la 1ere ligne vide
temp_wide
```

# Practice Q: Population to Wide
The population dataset shows the populations of 219 countries over time.

Reshape this data into a wide format.


```{python}
population
```


```{python}
population_wide=population.pivot(
    index="country",
    columns="year",
    values="population"
).reset_index() # pour enlever la 1ere ligne vide
population_wide
```
